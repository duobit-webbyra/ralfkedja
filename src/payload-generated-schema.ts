/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-d1-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-d1-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-d1-sqlite/drizzle'

export const comments_likes = sqliteTable(
  'comments_likes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('comments_likes_order_idx').on(columns._order),
    _parentIDIdx: index('comments_likes_parent_id_idx').on(columns._parentID),
    comments_likes_user_idx: index('comments_likes_user_idx').on(columns.user),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [comments.id],
      name: 'comments_likes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const comments = sqliteTable(
  'comments',
  {
    id: integer('id').primaryKey(),
    post: integer('post_id')
      .notNull()
      .references(() => posts.id, {
        onDelete: 'set null',
      }),
    comment: text('comment').notNull(),
    author: integer('author_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    comments_post_idx: index('comments_post_idx').on(columns.post),
    comments_author_idx: index('comments_author_idx').on(columns.author),
    comments_updated_at_idx: index('comments_updated_at_idx').on(columns.updatedAt),
  }),
)

export const posts_likes = sqliteTable(
  'posts_likes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('posts_likes_order_idx').on(columns._order),
    _parentIDIdx: index('posts_likes_parent_id_idx').on(columns._parentID),
    posts_likes_user_idx: index('posts_likes_user_idx').on(columns.user),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_likes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = sqliteTable(
  'posts',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    content: text('content').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
  }),
)

export const videos = sqliteTable(
  'videos',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    description: text('description'),
    url: text('url').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    videos_updated_at_idx: index('videos_updated_at_idx').on(columns.updatedAt),
    videos_created_at_idx: index('videos_created_at_idx').on(columns.createdAt),
  }),
)

export const reviews = sqliteTable(
  'reviews',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    feedback: text('feedback').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    reviews_updated_at_idx: index('reviews_updated_at_idx').on(columns.updatedAt),
    reviews_created_at_idx: index('reviews_created_at_idx').on(columns.createdAt),
  }),
)

export const users_sessions = sqliteTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    expiresAt: text('expires_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    role: text('role', { enum: ['host', 'admin', 'user'] }).notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    commentsID: integer('comments_id'),
    postsID: integer('posts_id'),
    videosID: integer('videos_id'),
    reviewsID: integer('reviews_id'),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_comments_id_idx: index(
      'payload_locked_documents_rels_comments_id_idx',
    ).on(columns.commentsID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_videos_id_idx: index(
      'payload_locked_documents_rels_videos_id_idx',
    ).on(columns.videosID),
    payload_locked_documents_rels_reviews_id_idx: index(
      'payload_locked_documents_rels_reviews_id_idx',
    ).on(columns.reviewsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    commentsIdFk: foreignKey({
      columns: [columns['commentsID']],
      foreignColumns: [comments.id],
      name: 'payload_locked_documents_rels_comments_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    videosIdFk: foreignKey({
      columns: [columns['videosID']],
      foreignColumns: [videos.id],
      name: 'payload_locked_documents_rels_videos_fk',
    }).onDelete('cascade'),
    reviewsIdFk: foreignKey({
      columns: [columns['reviewsID']],
      foreignColumns: [reviews.id],
      name: 'payload_locked_documents_rels_reviews_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const announcement = sqliteTable('announcement', {
  id: integer('id').primaryKey(),
  activate: integer('activate', { mode: 'boolean' }),
  message: text('message'),
  updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
})

export const contact = sqliteTable('contact', {
  id: integer('id').primaryKey(),
  address_street: text('address_street').notNull(),
  address_city: text('address_city').notNull(),
  address_zipcode: numeric('address_zipcode').notNull(),
  phone: text('phone').notNull(),
  email: text('email').notNull(),
  links_facebook: text('links_facebook'),
  links_instagram: text('links_instagram'),
  updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
})

export const gallery_images = sqliteTable(
  'gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('gallery_images_parent_id_idx').on(columns._parentID),
    gallery_images_image_idx: index('gallery_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [gallery.id],
      name: 'gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const gallery = sqliteTable('gallery', {
  id: integer('id').primaryKey(),
  updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
})

export const highlight_reviews = sqliteTable(
  'highlight_reviews',
  {
    id: integer('id').primaryKey(),
    'reviews_review-one': integer('reviews_review_one_id').references(() => reviews.id, {
      onDelete: 'set null',
    }),
    'reviews_review-two': integer('reviews_review_two_id').references(() => reviews.id, {
      onDelete: 'set null',
    }),
    'reviews_review-three': integer('reviews_review_three_id').references(() => reviews.id, {
      onDelete: 'set null',
    }),
    updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    highlight_reviews_reviews_reviews_review_one_idx: index(
      'highlight_reviews_reviews_reviews_review_one_idx',
    ).on(columns['reviews_review-one']),
    highlight_reviews_reviews_reviews_review_two_idx: index(
      'highlight_reviews_reviews_reviews_review_two_idx',
    ).on(columns['reviews_review-two']),
    highlight_reviews_reviews_reviews_review_three_idx: index(
      'highlight_reviews_reviews_reviews_review_three_idx',
    ).on(columns['reviews_review-three']),
  }),
)

export const relations_comments_likes = relations(comments_likes, ({ one }) => ({
  _parentID: one(comments, {
    fields: [comments_likes._parentID],
    references: [comments.id],
    relationName: 'likes',
  }),
  user: one(users, {
    fields: [comments_likes.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_comments = relations(comments, ({ one, many }) => ({
  post: one(posts, {
    fields: [comments.post],
    references: [posts.id],
    relationName: 'post',
  }),
  author: one(users, {
    fields: [comments.author],
    references: [users.id],
    relationName: 'author',
  }),
  likes: many(comments_likes, {
    relationName: 'likes',
  }),
}))
export const relations_posts_likes = relations(posts_likes, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_likes._parentID],
    references: [posts.id],
    relationName: 'likes',
  }),
  user: one(users, {
    fields: [posts_likes.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_posts = relations(posts, ({ many }) => ({
  likes: many(posts_likes, {
    relationName: 'likes',
  }),
}))
export const relations_videos = relations(videos, () => ({}))
export const relations_reviews = relations(reviews, () => ({}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    commentsID: one(comments, {
      fields: [payload_locked_documents_rels.commentsID],
      references: [comments.id],
      relationName: 'comments',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    videosID: one(videos, {
      fields: [payload_locked_documents_rels.videosID],
      references: [videos.id],
      relationName: 'videos',
    }),
    reviewsID: one(reviews, {
      fields: [payload_locked_documents_rels.reviewsID],
      references: [reviews.id],
      relationName: 'reviews',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_announcement = relations(announcement, () => ({}))
export const relations_contact = relations(contact, () => ({}))
export const relations_gallery_images = relations(gallery_images, ({ one }) => ({
  _parentID: one(gallery, {
    fields: [gallery_images._parentID],
    references: [gallery.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [gallery_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_gallery = relations(gallery, ({ many }) => ({
  images: many(gallery_images, {
    relationName: 'images',
  }),
}))
export const relations_highlight_reviews = relations(highlight_reviews, ({ one }) => ({
  'reviews_review-one': one(reviews, {
    fields: [highlight_reviews['reviews_review-one']],
    references: [reviews.id],
    relationName: 'reviews_review-one',
  }),
  'reviews_review-two': one(reviews, {
    fields: [highlight_reviews['reviews_review-two']],
    references: [reviews.id],
    relationName: 'reviews_review-two',
  }),
  'reviews_review-three': one(reviews, {
    fields: [highlight_reviews['reviews_review-three']],
    references: [reviews.id],
    relationName: 'reviews_review-three',
  }),
}))

type DatabaseSchema = {
  comments_likes: typeof comments_likes
  comments: typeof comments
  posts_likes: typeof posts_likes
  posts: typeof posts
  videos: typeof videos
  reviews: typeof reviews
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  announcement: typeof announcement
  contact: typeof contact
  gallery_images: typeof gallery_images
  gallery: typeof gallery
  highlight_reviews: typeof highlight_reviews
  relations_comments_likes: typeof relations_comments_likes
  relations_comments: typeof relations_comments
  relations_posts_likes: typeof relations_posts_likes
  relations_posts: typeof relations_posts
  relations_videos: typeof relations_videos
  relations_reviews: typeof relations_reviews
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_announcement: typeof relations_announcement
  relations_contact: typeof relations_contact
  relations_gallery_images: typeof relations_gallery_images
  relations_gallery: typeof relations_gallery
  relations_highlight_reviews: typeof relations_highlight_reviews
}

declare module '@payloadcms/db-d1-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
